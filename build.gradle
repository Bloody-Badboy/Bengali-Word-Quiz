// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.4.21'
    ext {
        androidxCoreVersion = "1.2.0"
        androidxCompatVersion = "1.1.0-rc01"
        androidxFragmentVersion = "1.1.0-rc01"
        coreVersion = "1.3.1-alpha02"
        extJUnitVersion = "1.1.3-alpha02"
        runnerVersion = "1.3.1-alpha02"
        rulesVersion = "1.3.1-alpha02"
        espressoVersion = "3.4.0-alpha02"
        robolectricVersion = "4.5-alpha-1"
        truthVersion = "1.0.1"
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.28-alpha'
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.2"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id("com.diffplug.gradle.spotless") version "4.5.1"
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8.toString()
            freeCompilerArgs += '-include-runtime'
            freeCompilerArgs +=
                    "-Xuse-experimental=" +
                            "kotlin.Experimental," +
                            "kotlinx.coroutines.ExperimentalCoroutinesApi," +
                            "kotlinx.coroutines.FlowPreview"
        }
    }
}

subprojects {
    apply plugin: "com.diffplug.gradle.spotless"
    ext.ktlintVer = "0.39.0"

    spotless {
        kotlin {
            target("**/*.kt")
            ktlint(ktlintVer)
            licenseHeaderFile rootProject.file("copyright.kt")
        }

        format 'xml', {
            target '**/*.xml'
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    tasks.whenTaskAdded {
        if (name == "preBuild") {
            mustRunAfter("spotlessCheck")
        }
    }
}